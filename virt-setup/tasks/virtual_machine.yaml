- name: Create a directory for Virtual Machines
  file:
    path: "{{ vm_directory }}"
    state: directory
    owner: root
    group: root
    mode: 0775
    recurse: yes

- name: Create a Virtual Machine disk file
  shell: qemu-img create -f qcow2 {{ vm_directory }}/{{ vm_name }}.qcow2 {{ vm_size }}

- name: Push base image to the VM disk
  shell: virt-resize -v  --expand /dev/sda3 {{ rhel8_qcow2_file }} {{ vm_directory}}/{{ vm_name }}.qcow2
  environment:
    LIBGUESTFS_PATH: "{{ ansible_env.HOME }}/appliance"
    LIBGUESTFS_BACKEND: direct
  tags:
    - rhel8_qcow2_workaround

- name: Expand root parition of the VM
  shell:  virt-customize -v -a {{ vm_directory}}/{{ vm_name }}.qcow2  --run-command 'xfs_growfs /'
  environment:
    LIBGUESTFS_PATH: "{{ ansible_env.HOME }}/appliance"
    LIBGUESTFS_BACKEND: direct
  tags:
    - rhel8_qcow2_workaround

- name: Set root password
  shell: virt-customize -a {{ vm_directory}}/{{ vm_name }}.qcow2 --root-password password:{{ vm_root_password }}
  environment:
    LIBGUESTFS_PATH: "{{ ansible_env.HOME }}/appliance"
    LIBGUESTFS_BACKEND: direct
  tags:
    - rhel8_qcow2_workaround

- name: Remove cloud init
  shell: virt-customize -a {{ vm_directory}}/{{ vm_name }}.qcow2 --run-command 'yum remove cloud-init* -y'
  environment:
    LIBGUESTFS_PATH: "{{ ansible_env.HOME }}/appliance"
    LIBGUESTFS_BACKEND: direct
  tags:
    - rhel8_qcow2_workaround

- name: SSH fix
  shell: virt-customize -a {{ vm_directory }}/{{ vm_name }}.qcow2 --run-command "sed -i 's/#MaxAuthTries [0-9]/MaxAuthTries = 8/' /etc/ssh/sshd_config" --ssh-inject "root:string:{{ baremetal_ssh_key }}" --selinux-relabel
  environment:
    LIBGUESTFS_PATH: "{{ ansible_env.HOME }}/appliance"
    LIBGUESTFS_BACKEND: direct
  tags:
    - rhel8_qcow2_workaround

- name: Set ifcfg-eth1 file
  shell: virt-customize -a {{ vm_directory}}/{{ vm_name }}.qcow2 --run-command 'echo {{ item }}  >> /etc/sysconfig/network-scripts/ifcfg-eth1'
  with_items:
    - DEVICE="eth1"
    - ONBOOT="yes"
    - TYPE="Ethernet"
    - PEERDNS="yes"
    - IPV6INIT="no"
    - BOOTPROTO="none"
  environment:
    LIBGUESTFS_PATH: "{{ ansible_env.HOME }}/appliance"
    LIBGUESTFS_BACKEND: direct
  tags:
    - rhel8_qcow2_workaround

- name: Boot VM
  shell: virt-install --ram {{ vm_memory_size }}  --vcpus {{ vm_cpu_count }}  --os-variant=rhel8.0 --disk path={{ vm_directory}}/{{ vm_name }}.qcow2,device=disk,bus=virtio,format=qcow2 --network network={{ network1_name }},model=virtio  --network network={{ network2_name }},model=virtio --noautoconsole --vnc --hvm --import --name {{ vm_name }}
  tags:
    - create_vm

- name: Check if the instance is in running state
  virt:
    command: status
    name: "{{ vm_name }}"
  register: vm_state
  retries: 10
  until: vm_state.status == "running"

- name: debug output
  debug:
    msg: "{{ vm_state.status }}"

- name: Get IP addr
  shell: virsh domifaddr {{ vm_name }} --interface vnet0 | awk '{print $4}' | egrep ^[0-9] |cut -d'/' -f1
  retries: 20
  register: vm_ip
  until: vm_ip.stdout != ""

- name: debug output
  debug:
    msg: "{{ vm_ip.stdout }}"

- name: Update inventory file
  ini_file:
    path: inventory
    section: aio-osp
    option: "{{ vm_ip.stdout }} ansible_python_interpreter=/usr/libexec/platform-python"
    allow_no_value: yes

- name: Refresh the inventory
  meta: refresh_inventory
